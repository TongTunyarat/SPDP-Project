package com.example.project.service;

import com.example.project.DTO.Score.*;
import com.example.project.entity.*;
import com.example.project.repository.*;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class CalculateService {

    @Autowired
    private ProposalEvaluationRepository evaluationRepository;
    @Autowired
    private ProposalEvalScoreRepository scoreRepository;
    @Autowired
    private CriteriaRepository criteriaRepository;
    @Autowired
    private DefenseEvaluationRepository defenseEvaluationRepository;
    @Autowired
    private DefenseEvalScoreRepository defenseEvalScoreRepository;
    @Autowired
    private PosterEvaRepository posterEvaRepository;
    @Autowired
    private PosterEvaScoreRepository posterEvaScoreRepository;
    @Autowired
    private ProposalEvaluationRepository proposalEvaluationRepository;

    @Autowired
    private GradingProposalEvaluationRepository gradingProposalEvaluationRepository;
    @Autowired
    private GradingDefenseEvaluationRepository gradingDefenseEvaluationRepository;
    @Autowired
    private ProjectInstructorRoleRepository projectInstructorRoleRepository;

    // ---------------------- Proposal Eva -------------------------//
//    @Transactional
//    public void saveEvaluation(ProjectInstructorRole instructor, Project project, Student student, List<ScoreDTO> scores) {
//        System.out.println("[Service] Inside saveEvaluation");
//
//        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° instructor, project ‡πÅ‡∏•‡∏∞ student
//        ProposalEvaluation evaluation = evaluationRepository.findByProjectInstructorRoleAndProjectAndStudent(instructor, project, student);
//
//        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ProposalEvaluation ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
//        if (evaluation == null) {
//            evaluation = new ProposalEvaluation()
//                    .setProjectInstructorRole(instructor)
//                    .setProject(project)
//                    .setStudent(student);
//
//            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ProposalEvaluation ‡πÉ‡∏´‡∏°‡πà
//            evaluation = evaluationRepository.save(evaluation);
//            if (evaluation.getProposalId() == null) {
//                throw new IllegalArgumentException("Proposal ID cannot be null");
//            }
//            System.out.println("[Service] Saved ProposalEvaluation with ID: " + evaluation.getProposalId());
//        } else {
//            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ update ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
//            System.out.println("[Service] Found existing ProposalEvaluation with ID: " + evaluation.getProposalId());
//        }
//
//        String proposalId = evaluation.getProposalId();
//
//        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏á ProposalEvalScore
//        for (ScoreDTO score : scores) {
//            // ‡∏î‡∏∂‡∏á Criteria ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° scoreCriteriaId
//            System.out.println("[Service] Score: " + score.getScore());
//            System.out.println("[Service] Criteria: " + score.getScoreCriteriaId());
//
//            Criteria criteria = criteriaRepository.findById(score.getScoreCriteriaId())
//                    .orElseThrow(() -> new IllegalArgumentException("Criteria not found for id: " + score.getScoreCriteriaId()));
//
//            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ evaId ‡πÄ‡∏õ‡πá‡∏ô key)
//            ProposalEvalScore evalScore = scoreRepository.findByEvaId(proposalId + "_" + score.getScoreCriteriaId());
//
//            if (evalScore == null) {
//                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
//                evalScore = new ProposalEvalScore()
//                        .setEvaId(proposalId + "_" + score.getScoreCriteriaId())
//                        .setScore(score.getScore())
//                        .setCriteria(criteria)
//                        .setProposalEvaluation(evaluation);
//
//                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà
//                scoreRepository.save(evalScore);
//                System.out.println("[Service] Saved ProposalEvalScore for criteria: " + score.getScoreCriteriaId());
//            } else {
//                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
//                evalScore.setScore(score.getScore());
//                scoreRepository.save(evalScore);
//                System.out.println("[Service] Updated ProposalEvalScore for criteria: " + score.getScoreCriteriaId());
//            }
//        }
//    }
    @Transactional
    public void saveEvaluation(ProjectInstructorRole instructor, Project project, Student student, List<ScoreDTO> scores, String comment) {
        System.out.println("[Service] Inside saveEvaluation");

        System.out.println("üí¨ Comment: " + comment);
        System.out.println("üí¨ Score: " + scores);

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        ProposalEvaluation evaluation = evaluationRepository.findByProjectInstructorRoleAndProjectAndStudent(instructor, project, student);

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        if (evaluation == null) {
            evaluation = new ProposalEvaluation()
                    .setProjectInstructorRole(instructor)
                    .setProject(project)
                    .setComment(comment)
                    .setStudent(student);
        } else {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            System.out.println("[Service] Found existing ProposalEvaluation with ID: " + evaluation.getProposalId());
            evaluation.setComment(comment);
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        // ‚úÖ ‡πÉ‡∏ä‡πâ .intValue() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á BigDecimal ‡πÄ‡∏õ‡πá‡∏ô int
        int totalScore = scores.stream()
                .map(ScoreDTO::getScore)  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ BigDecimal
                .mapToInt(BigDecimal::intValue)  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
                .sum();

        evaluation.setTotalScore(BigDecimal.valueOf(totalScore));

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ProposalEvaluation
        evaluation = evaluationRepository.save(evaluation);
        String proposalId = evaluation.getProposalId();
        System.out.println("[Service] Saved/Updated ProposalEvaluation with ID: " + proposalId);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ criteria
        for (ScoreDTO score : scores) {
            System.out.println("[Service] Score: " + score.getScore());
            System.out.println("[Service] Criteria: " + score.getScoreCriteriaId());

            Criteria criteria = criteriaRepository.findById(score.getScoreCriteriaId())
                    .orElseThrow(() -> new IllegalArgumentException("Criteria not found for id: " + score.getScoreCriteriaId()));

            ProposalEvalScore evalScore = scoreRepository.findByEvaId(proposalId + "_" + score.getScoreCriteriaId());

            if (evalScore == null) {
                evalScore = new ProposalEvalScore()
                        .setEvaId(proposalId + "_" + score.getScoreCriteriaId())
                        .setScore(score.getScore())
                        .setCriteria(criteria)
                        .setProposalEvaluation(evaluation);

                scoreRepository.save(evalScore);
                System.out.println("[Service] Saved ProposalEvalScore for criteria: " + score.getScoreCriteriaId());
            } else {
                evalScore.setScore(score.getScore());
                scoreRepository.save(evalScore);
                System.out.println("[Service] Updated ProposalEvalScore for criteria: " + score.getScoreCriteriaId());
            }
        }
    }

    public StudentScoreDTO calculateTotalScoreProposal(ProjectInstructorRole instructor, Project project, Student student) {
        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Evaluation ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        ProposalEvaluation evaluation = evaluationRepository.findByProjectInstructorRoleAndProjectAndStudent(instructor, project, student);

        if (evaluation == null) {
            throw new EntityNotFoundException("Proposal evaluation not found");
        }

        double rawTotalScore = 0.0;
        List<ScoreDetail> scoreDetails = new ArrayList<>();

        for (ProposalEvalScore score : evaluation.getProposalEvalScores()) {
            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Max Score ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Double
            String maxScoreStr = score.getCriteria().getMaxScore();
            double maxScore = (maxScoreStr != null && !maxScoreStr.isEmpty()) ?
                    Double.parseDouble(maxScoreStr) : 10.0; // Default ‡πÄ‡∏õ‡πá‡∏ô 10

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Weight ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Double
            Float weightObj = score.getCriteria().getWeight();
            double finalWeight = (weightObj != null) ? weightObj.doubleValue() : 1.0;

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Score ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö null
            Float scoreObj = score.getScore().floatValue();
            double scoreValue = (scoreObj != null) ? scoreObj.doubleValue() : 0.0;

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Weighted Score ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ Weight ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏£‡∏¥‡∏á
            double weightedScore = (scoreValue / maxScore) * (finalWeight * 100.0);
            rawTotalScore += weightedScore;

            // ‚úÖ Debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            System.out.println("üìå Criteria: " + score.getCriteria().getCriteriaId());
            System.out.println("üìå Score: " + scoreValue + ", Max Score: " + maxScore + ", Weight: " + finalWeight + ", Weighted Score: " + weightedScore);

            scoreDetails.add(new ScoreDetail(score.getCriteria().getCriteriaId(), weightedScore));
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 40%
        double totalScore = Math.min(rawTotalScore, 40.0);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ rawTotalScore ‡∏•‡∏á‡πÉ‡∏ô Column `totalScore` ‡∏Ç‡∏≠‡∏á Evaluation
        evaluation.setTotalScore(BigDecimal.valueOf(rawTotalScore));
        evaluationRepository.save(evaluation);

        // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤ rawTotalScore ‡πÅ‡∏•‡∏∞ totalScore
        System.out.println("üìå Raw Total Score: " + rawTotalScore);
        System.out.println("üìå Final Total Score (40%): " + totalScore);

        return new StudentScoreDTO(scoreDetails, rawTotalScore, totalScore);
    }


    // ---------------- Defense Eva ------------------------ //
//    @Transactional
//    public void saveDefenseEvaluation(ProjectInstructorRole instructor, Project project, Student student, List<ScoreDTO> scores) {
//        System.out.println("[Service] Inside saveDefenseEvaluation");
//
//        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° instructor, project ‡πÅ‡∏•‡∏∞ student
//        DefenseEvaluation evaluation = defenseEvaluationRepository.findByDefenseInstructorIdAndProjectIdAndStudent(instructor, project, student);
//
//        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ProposalEvaluation ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
//        if (evaluation == null) {
//            evaluation = new DefenseEvaluation()
//                    .setDefenseInstructorId(instructor)
//                    .setProjectId (project)
//                    .setStudent(student);
//
//            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ProposalEvaluation ‡πÉ‡∏´‡∏°‡πà
//            evaluation = defenseEvaluationRepository.save(evaluation);
//            if (evaluation.getDefenseEvaId() == null) {
//                throw new IllegalArgumentException("Defense ID cannot be null");
//            }
//            System.out.println("[Service] Saved DefenseEvaluation with ID: " + evaluation.getDefenseEvaId());
//        } else {
//            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ update ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
//            System.out.println("[Service] Found existing DefenseEvaluation with ID: " + evaluation.getDefenseEvaId());
//        }
//
//        String defenseId = evaluation.getDefenseEvaId();
//
//        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏á ProposalEvalScore
//        for (ScoreDTO score : scores) {
//            // ‡∏î‡∏∂‡∏á Criteria ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° scoreCriteriaId
//            System.out.println("[Service] Score: " + score.getScore());
//            System.out.println("[Service] Criteria: " + score.getScoreCriteriaId());
//
//            Criteria criteria = criteriaRepository.findById(score.getScoreCriteriaId())
//                    .orElseThrow(() -> new IllegalArgumentException("Criteria not found for id: " + score.getScoreCriteriaId()));
//
//            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ evaId ‡πÄ‡∏õ‡πá‡∏ô key)
//            DefenseEvalScore evalScore = defenseEvalScoreRepository.findByEvalId(defenseId + "_" + score.getScoreCriteriaId());
//
//            if (evalScore == null) {
//                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
//                evalScore = new DefenseEvalScore()
//                        .setEvalId(defenseId + "_" + score.getScoreCriteriaId())
//                        .setScore(score.getScore().intValue())
//                        .setCriteria(criteria)
//                        .setDefenseEvaluation(evaluation);
//
//                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà
//                defenseEvalScoreRepository.save(evalScore);
//                System.out.println("[Service] Saved ProposalEvalScore for criteria: " + score.getScoreCriteriaId());
//            } else {
//                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
//                evalScore.setScore(score.getScore().intValue());
//                defenseEvalScoreRepository.save(evalScore);
//                System.out.println("[Service] Updated ProposalEvalScore for criteria: " + score.getScoreCriteriaId());
//            }
//        }
//    }

    @Transactional
    public void saveDefenseEvaluation(ProjectInstructorRole instructor, Project project, Student student, List<ScoreDTO> scores, String comment) {
        System.out.println("[Service] Inside saveDefenseEvaluation");

        System.out.println("üí¨ Comment: " + comment);
        System.out.println("üí¨ Score: " + scores);

        DefenseEvaluation evaluation = defenseEvaluationRepository.findByDefenseInstructorIdAndProjectIdAndStudent(instructor, project, student);

        if (evaluation == null) {
            evaluation = new DefenseEvaluation()
                    .setDefenseInstructorId(instructor)
                    .setProjectId(project)
                    .setComment(comment)
                    .setStudent(student);

            evaluation = defenseEvaluationRepository.save(evaluation);
            if (evaluation.getDefenseEvaId() == null) {
                throw new IllegalArgumentException("Defense ID cannot be null");
            }
            System.out.println("[Service] Saved DefenseEvaluation with ID: " + evaluation.getDefenseEvaId());
        } else {
            System.out.println("[Service] Found existing DefenseEvaluation with ID: " + evaluation.getDefenseEvaId());
            evaluation.setComment(comment);
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÑ‡∏ß‡πâ)
        BigDecimal totalScore = scores.stream()
                .map(ScoreDTO::getScore) // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ BigDecimal
                .reduce(BigDecimal.ZERO, BigDecimal::add); // ‡πÉ‡∏ä‡πâ BigDecimal.sum ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°

        evaluation.setTotalScore(totalScore);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DefenseEvaluation
        evaluation = defenseEvaluationRepository.save(evaluation);
        String defenseId = evaluation.getDefenseEvaId();

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏á DefenseEvalScore
        for (ScoreDTO score : scores) {
            System.out.println("[Service] Score: " + score.getScore());
            System.out.println("[Service] Criteria: " + score.getScoreCriteriaId());

            Criteria criteria = criteriaRepository.findById(score.getScoreCriteriaId())
                    .orElseThrow(() -> new IllegalArgumentException("Criteria not found for id: " + score.getScoreCriteriaId()));

            DefenseEvalScore evalScore = defenseEvalScoreRepository.findByEvalId(defenseId + "_" + score.getScoreCriteriaId());

            if (evalScore == null) {
                evalScore = new DefenseEvalScore()
                        .setEvalId(defenseId + "_" + score.getScoreCriteriaId())
                        .setScore(score.getScore().floatValue()) // ‚úÖ ‡πÉ‡∏ä‡πâ floatValue() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
                        .setCriteria(criteria)
                        .setDefenseEvaluation(evaluation);


                defenseEvalScoreRepository.save(evalScore);
                System.out.println("[Service] Saved DefenseEvalScore for criteria: " + score.getScoreCriteriaId());
            } else {
                evalScore.setScore(score.getScore().floatValue()); // ‚úÖ ‡πÉ‡∏ä‡πâ floatValue() ‡πÅ‡∏ó‡∏ô intValue()
                defenseEvalScoreRepository.save(evalScore);
                System.out.println("[Service] Updated DefenseEvalScore for criteria: " + score.getScoreCriteriaId());
            }
        }
    }


    public StudentScoreDTO calculateTotalScoreDefense(ProjectInstructorRole instructor, Project project, Student student) {
        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Evaluation ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        DefenseEvaluation evaluation = defenseEvaluationRepository.findByDefenseInstructorIdAndProjectIdAndStudent(instructor, project, student);

        if (evaluation == null) {
            throw new EntityNotFoundException("Defense evaluation not found");
        }

        double rawTotalScore = 0.0;
        List<ScoreDetail> scoreDetails = new ArrayList<>();

        for (DefenseEvalScore score : evaluation.getDefenseEvalScore()) {
            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Max Score ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Double
            String maxScoreStr = score.getCriteria().getMaxScore();
            double maxScore = (maxScoreStr != null && !maxScoreStr.isEmpty()) ?
                    Double.parseDouble(maxScoreStr) : 10.0; // Default ‡πÄ‡∏õ‡πá‡∏ô 10

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Weight ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Double
            Float weightObj = score.getCriteria().getWeight();
            double finalWeight = (weightObj != null) ? weightObj.doubleValue() : 1.0;

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Score ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö null
            BigDecimal scoreObj = score.getScore();
            double scoreValue = (scoreObj != null) ? scoreObj.doubleValue() : 0.0;

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Weighted Score ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ Weight ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏£‡∏¥‡∏á
            double weightedScore = (scoreValue / maxScore) * (finalWeight * 100.0);
            rawTotalScore += weightedScore;

            // ‚úÖ Debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            System.out.println("üìå Criteria: " + score.getCriteria().getCriteriaId());
            System.out.println("üìå Score: " + scoreValue + ", Max Score: " + maxScore + ", Weight: " + finalWeight + ", Weighted Score: " + weightedScore);

            scoreDetails.add(new ScoreDetail(score.getCriteria().getCriteriaId(), weightedScore));
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 40%
        double totalScore = Math.min(rawTotalScore, 40.0);

        evaluation.setTotalScore(BigDecimal.valueOf(rawTotalScore));
        defenseEvaluationRepository.save(evaluation);

        // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤ rawTotalScore ‡πÅ‡∏•‡∏∞ totalScore
        System.out.println("üìå Raw Total Score: " + rawTotalScore);
        System.out.println("üìå Final Total Score (40%): " + totalScore);


        return new StudentScoreDTO(scoreDetails, rawTotalScore, totalScore);
    }


    // ---------------- Poster Eva ------------------------ //
//    @Transactional
//    public void savePosterEvaluation(ProjectInstructorRole instructor, Project project, List<ScoreDTO> scores) {
//        System.out.println("[Service] Inside savePosterEvaluation");
//
//        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° instructor, project ‡πÅ‡∏•‡∏∞ student
//        PosterEvaluation evaluation = posterEvaRepository.findByInstructorIdPosterAndProjectIdPoster(instructor, project);
//
//        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ProposalEvaluation ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
//        if (evaluation == null) {
//            evaluation = new PosterEvaluation()
//                    .setInstructorIdPoster(instructor)
//                    .setProjectIdPoster(project);
//
//            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PosterEvaluation ‡πÉ‡∏´‡∏°‡πà
//            evaluation = posterEvaRepository.save(evaluation);
//            if (evaluation.getPosterId() == null) {
//                throw new IllegalArgumentException("PosterEvaluation ID cannot be null");
//            }
//            System.out.println("[Service] Saved PosterEvaluation with ID: " + evaluation.getPosterId());
//        } else {
//            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ update ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
//            System.out.println("[Service] Found existing PosterEvaluation with ID: " + evaluation.getPosterId());
//        }
//
//        String posterId = evaluation.getPosterId();
//
//        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏á ProposalEvalScore
//        for (ScoreDTO score : scores) {
//            // ‡∏î‡∏∂‡∏á Criteria ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° scoreCriteriaId
//            System.out.println("[Service] Score: " + score.getScore());
//            System.out.println("[Service] Criteria: " + score.getScoreCriteriaId());
//
//            Criteria criteria = criteriaRepository.findById(score.getScoreCriteriaId())
//                    .orElseThrow(() -> new IllegalArgumentException("Criteria not found for id: " + score.getScoreCriteriaId()));
//
//            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ evaId ‡πÄ‡∏õ‡πá‡∏ô key)
//            PosterEvaluationScore evalScore = posterEvaScoreRepository.findByPosterEvaId(posterId + "_" + score.getScoreCriteriaId());
//
//            if (evalScore == null) {
//                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
//                evalScore = new PosterEvaluationScore()
//                        .setPosterEvaId(posterId + "_" + score.getScoreCriteriaId())
//                        .setScore(score.getScore().intValue())
//                        .setCriteriaPoster(criteria)
//                        .setPosterEvaluation(evaluation);
//
//                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà
//                posterEvaScoreRepository.save(evalScore);
//                System.out.println("[Service] Saved PosterEvalScore for criteria: " + score.getScoreCriteriaId());
//            } else {
//                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
//                evalScore.setScore(score.getScore().intValue());
//                posterEvaScoreRepository.save(evalScore);
//                System.out.println("[Service] Updated PosterEvalScore for criteria: " + score.getScoreCriteriaId());
//            }
//        }
//    }
    @Transactional
    public void savePosterEvaluation(ProjectInstructorRole instructor, Project project, List<ScoreDTO> scores, String comment) {
        System.out.println("[Service] Inside savePosterEvaluation");

        PosterEvaluation evaluation = posterEvaRepository.findByInstructorIdPosterAndProjectIdPoster(instructor, project);

        if (evaluation == null) {
            evaluation = new PosterEvaluation()
                    .setInstructorIdPoster(instructor)
                    .setProjectIdPoster(project);
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        evaluation.setComment(comment);

        evaluation = posterEvaRepository.save(evaluation);
        System.out.println("[Service] Saved PosterEvaluation with ID: " + evaluation.getPosterId());

        String posterId = evaluation.getPosterId();

        for (ScoreDTO score : scores) {
            System.out.println("[Service] Score: " + score.getScore());
            System.out.println("[Service] Criteria: " + score.getScoreCriteriaId());

            Criteria criteria = criteriaRepository.findById(score.getScoreCriteriaId())
                    .orElseThrow(() -> new IllegalArgumentException("Criteria not found for id: " + score.getScoreCriteriaId()));

            PosterEvaluationScore evalScore = posterEvaScoreRepository.findByPosterEvaId(posterId + "_" + score.getScoreCriteriaId());

            if (evalScore == null) {
                evalScore = new PosterEvaluationScore()
                        .setPosterEvaId(posterId + "_" + score.getScoreCriteriaId())
                        .setScore(score.getScore().floatValue())
                        .setCriteriaPoster(criteria)
                        .setPosterEvaluation(evaluation);

                posterEvaScoreRepository.save(evalScore);
                System.out.println("[Service] Saved PosterEvalScore for criteria: " + score.getScoreCriteriaId());
            } else {
                evalScore.setScore(score.getScore().floatValue());
                posterEvaScoreRepository.save(evalScore);
                System.out.println("[Service] Updated PosterEvalScore for criteria: " + score.getScoreCriteriaId());
            }
        }
    }


    public StudentScoreDTO calculateTotalScorePoster(ProjectInstructorRole instructor, Project project) {
        PosterEvaluation evaluation = posterEvaRepository.findByInstructorIdPosterAndProjectIdPoster(instructor, project);

        if (evaluation == null) {
            throw new EntityNotFoundException("Poster evaluation not found");
        }

        double rawTotalScore = 0.0;
        List<ScoreDetail> scoreDetails = new ArrayList<>();

        for (PosterEvaluationScore score : evaluation.getPosterEvaluationScores()) {
            rawTotalScore += score.getScore(); // ‡∏ö‡∏ß‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î %

            ScoreDetail detail = new ScoreDetail(score.getCriteriaPoster().getCriteriaId(), score.getScore());
            scoreDetails.add(detail);
        }

        double totalScore = rawTotalScore * 0.1; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 10%

        evaluation.setTotalScore(BigDecimal.valueOf(rawTotalScore));
        posterEvaRepository.save(evaluation);

        return new StudentScoreDTO(scoreDetails, rawTotalScore, totalScore);
    }



    // ---------------------- GRADE ---------------------- //
    @Transactional
    public String saveProposalGrade(Project project, Student student, ScoreRequestDTO scoreRequest) {
        System.out.println("ü™Ñ [Service] Inside saveProposalGrade");

        System.out.println("[Service] scoreRequest: " + scoreRequest.getScores().toString());

        // Extracting values from DTO
        BigDecimal evaluateScore = scoreRequest.getScores().stream()
                .map(ScoreDTO::getScore)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal avgScoreProposal = BigDecimal.valueOf(scoreRequest.getScoreProposal());
        BigDecimal totalScore = BigDecimal.valueOf(scoreRequest.getTotalScore());
        String gradeResult = scoreRequest.getGrade();

        System.out.println("[Service] Saving proposal avgScoreProposal: " + avgScoreProposal);
        System.out.println("[Service] Saving proposal evaluateScore: " + evaluateScore);
        System.out.println("[Service] Saving proposal totalScore: " + totalScore);
        System.out.println("[Service] Saving proposal grade: " + gradeResult);

        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GradingProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        GradingProposalEvaluation existingGrading = gradingProposalEvaluationRepository.findByProjectAndStudent(project, student);

        if (existingGrading != null) {
            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            existingGrading.setDateTime(LocalDateTime.now());
            existingGrading.setAvgScoreProposal(avgScoreProposal);
            existingGrading.setEvaluateScore(evaluateScore);
            existingGrading.setTotalScore(totalScore);
            existingGrading.setGradeResult(gradeResult);

            gradingProposalEvaluationRepository.save(existingGrading);
            System.out.println("‚úÖ [Service] Proposal Grade: "+ existingGrading.toString());
            System.out.println("‚úÖ [Service] Proposal Grade Updated Successfully!");

            return existingGrading.getGradeResult();
        } else {
            // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            GradingProposalEvaluation grading = new GradingProposalEvaluation();
            grading.setProposalGradeId(UUID.randomUUID().toString());
            grading.setDateTime(LocalDateTime.now());
            grading.setAvgScoreProposal(avgScoreProposal);
            grading.setEvaluateScore(evaluateScore);
            grading.setTotalScore(totalScore);
            grading.setGradeResult(gradeResult);
            grading.setProject(project);
            grading.setStudent(student);

            gradingProposalEvaluationRepository.save(grading);
            System.out.println("‚úÖ [Service] Proposal Grade Created Successfully!");

            return grading.getGradeResult();
        }
    }

    @Transactional
    public String saveDefenseGrade(Project project, Student student, DefenseScoreRequestDTO scoreRequest) {

        System.out.println("ü™Ñ [Service] Inside saveProposalGrade");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        System.out.println("[Service] scoreRequest: " + scoreRequest.getScores().toString());

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Evaluate ‡πÅ‡∏•‡∏∞ Extra ‡∏à‡∏≤‡∏Å scoreRequest
        BigDecimal advisorScore = BigDecimal.ZERO;
        BigDecimal extraScore = BigDecimal.ZERO;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å scoreRequest ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö CRIT022 ‡πÅ‡∏•‡∏∞ CRIT023
        for (ScoreDTO score : scoreRequest.getScores()) {
            if ("CRIT022".equals(score.getScoreCriteriaId())) {
                advisorScore = score.getScore(); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
            } else if ("CRIT023".equals(score.getScoreCriteriaId())) {
                extraScore = score.getScore(); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            }
        }

        BigDecimal posterScore = BigDecimal.valueOf(scoreRequest.getPosterScore());
        BigDecimal defenseScore = BigDecimal.valueOf(scoreRequest.getDefenseScore());
        BigDecimal totalScore = BigDecimal.valueOf(scoreRequest.getTotalScore());
        String gradeResult = scoreRequest.getGrade();

        System.out.println("[Service] Saving proposal posterScore: " + posterScore);
        System.out.println("[Service] Saving proposal defenseScore: " + defenseScore);
        System.out.println("[Service] Saving proposal advisorScore: " + advisorScore);
        System.out.println("[Service] Saving proposal extraScore: " + extraScore);
        System.out.println("[Service] Saving proposal totalScore: " + totalScore);
        System.out.println("[Service] Saving proposal grade: " + gradeResult);

        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GradingDefenseEvaluation
        GradingDefenseEvaluation gradingDefense = gradingDefenseEvaluationRepository.findByProjectIdAndStudentId(project, student);
        if (gradingDefense == null) {
            gradingDefense = new GradingDefenseEvaluation();
            gradingDefense.setDefenseGradeEvalId(UUID.randomUUID().toString());
            gradingDefense.setDatetime(LocalDateTime.now());
            gradingDefense.setProjectId(project);
            gradingDefense.setStudentId(student);
            gradingDefense.setAvgScoreDefense(defenseScore.doubleValue());
            gradingDefense.setAvgPosterScore(posterScore.doubleValue());
            gradingDefense.setEvaluateScore(advisorScore.doubleValue());
            gradingDefense.setExtraScore(extraScore.doubleValue());
            gradingDefense.setTotalScore(totalScore.doubleValue());
            gradingDefense.setGradeResult(gradeResult);
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
        gradingDefense.setAvgScoreDefense(defenseScore.doubleValue());
        gradingDefense.setAvgPosterScore(posterScore.doubleValue());
        gradingDefense.setEvaluateScore(advisorScore.doubleValue());
        gradingDefense.setExtraScore(extraScore.doubleValue());
        gradingDefense.setTotalScore(totalScore.doubleValue());
        gradingDefense.setGradeResult(gradeResult);

        gradingDefenseEvaluationRepository.save(gradingDefense);

        System.out.println("‚úÖ Assigned Grade: " + gradeResult);
        return gradeResult;
    }


//    @Transactional
//    public String saveProposalGrade(Project project, Student student, List<ScoreDTO> scores) {
//        System.out.println("ü™Ñ [Service] Inside saveProposalGrade");
//
//        // üîç ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ProjectInstructorRole ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Project ‡∏ô‡∏µ‡πâ
//        List<ProjectInstructorRole> projectList = projectInstructorRoleRepository.findByProjectIdRole_ProjectId(project.getProjectId());
//        System.out.println("üìå Total ProjectInstructorRole: " + projectList.size());
//
//        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ProposalEvaluation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Project ‡πÅ‡∏•‡∏∞ Student
//        List<ProposalEvaluation> evaluations = evaluationRepository.findByProjectAndStudent(project, student);
//        System.out.println("üìë Found evaluations: " + evaluations.size());
//
//
//        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Proposal Score (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
//        BigDecimal avgScoreProposal = BigDecimal.ZERO;
//        int totalEvaluators = projectList.size(); // ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ó‡∏ô
//
//        if (!evaluations.isEmpty()) {
//            avgScoreProposal = evaluations.stream()
//                    .map(evaluation -> evaluation.getTotalScore() != null ? evaluation.getTotalScore() : BigDecimal.ZERO)
//                    .peek(score -> System.out.println("üìå Processed Score: " + score))
//                    .reduce(BigDecimal.ZERO, BigDecimal::add)
//                    .divide(BigDecimal.valueOf(totalEvaluators), 2, RoundingMode.HALF_UP); // ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏£
//        }
//        System.out.println("üíØ avgScoreProposal: " + avgScoreProposal);
//
//        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì evaluateScore ‡∏à‡∏≤‡∏Å `scores`
//        BigDecimal evaluateScore = scores.stream()
//                .map(ScoreDTO::getScore)
//                .reduce(BigDecimal.ZERO, BigDecimal::add);
//
//        System.out.println("üíØ evaluateScore (‡πÄ‡∏ï‡πá‡∏° 10): " + evaluateScore);
//
//        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total Score (‡∏£‡∏ß‡∏° Proposal + Evaluate) **‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 100**
//        BigDecimal totalScore = avgScoreProposal.add(evaluateScore);
//        totalScore = totalScore.min(new BigDecimal("100")); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà 100
//        System.out.println("üíØ totalScore (capped at 100): " + totalScore);
//
//        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô projectList ‡πÅ‡∏•‡∏∞ evaluations ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "I" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô return
//        if (projectList.size() != evaluations.size()) {
//            System.out.println("‚ö†Ô∏è Project list size does not match evaluations! Saving grade 'I'...");
//
//            // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GradingProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
//            GradingProposalEvaluation existingGrading = gradingProposalEvaluationRepository.findByProjectAndStudent(project, student);
//
//            if (existingGrading != null) {
//                // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô "I"
//                existingGrading.setDateTime(LocalDateTime.now());
//                existingGrading.setAvgScoreProposal(avgScoreProposal);
//                existingGrading.setEvaluateScore(evaluateScore);
//                existingGrading.setTotalScore(totalScore);
//                existingGrading.setGradeResult("I");
//
//                gradingProposalEvaluationRepository.save(existingGrading);
//                System.out.println("‚úÖ [Service] Updated existing grade to 'I'");
//            } else {
//                // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
//                GradingProposalEvaluation grading = new GradingProposalEvaluation();
//                grading.setProposalGradeId(UUID.randomUUID().toString());
//                grading.setDateTime(LocalDateTime.now());
//                existingGrading.setDateTime(LocalDateTime.now());
//                existingGrading.setAvgScoreProposal(avgScoreProposal);
//                existingGrading.setEvaluateScore(evaluateScore);
//                existingGrading.setTotalScore(totalScore);
//                grading.setGradeResult("I");
//                grading.setProject(project);
//                grading.setStudent(student);
//
//                gradingProposalEvaluationRepository.save(grading);
//                System.out.println("‚úÖ [Service] Created new grade entry with 'I'");
//            }
//
//            return "I";
//        }
//
//        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
//        String gradeResult = calculateGrade(totalScore);
//        System.out.println("üÖ∞Ô∏è gradeResult: " + gradeResult);
//
//        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GradingProposalEvaluation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
//        GradingProposalEvaluation existingGrading = gradingProposalEvaluationRepository.findByProjectAndStudent(project, student);
//
//        if (existingGrading != null) {
//            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
//            existingGrading.setDateTime(LocalDateTime.now());
//            existingGrading.setAvgScoreProposal(avgScoreProposal);
//            existingGrading.setEvaluateScore(evaluateScore);
//            existingGrading.setTotalScore(totalScore);
//            existingGrading.setGradeResult(gradeResult);
//
//            gradingProposalEvaluationRepository.save(existingGrading);
//            System.out.println("‚úÖ [Service] Proposal Grade Updated Successfully!");
//
//            return existingGrading.getGradeResult();
//        } else {
//            // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
//            GradingProposalEvaluation grading = new GradingProposalEvaluation();
//            grading.setProposalGradeId(UUID.randomUUID().toString());
//            grading.setDateTime(LocalDateTime.now());
//            grading.setAvgScoreProposal(avgScoreProposal);
//            grading.setEvaluateScore(evaluateScore);
//            grading.setTotalScore(totalScore);
//            grading.setGradeResult(gradeResult);
//            grading.setProject(project);
//            grading.setStudent(student);
//
//            gradingProposalEvaluationRepository.save(grading);
//            System.out.println("‚úÖ [Service] Proposal Grade Created Successfully!");
//
//            return grading.getGradeResult();
//        }
//    }

//    @Transactional
//    public String saveDefenseGrade(ProjectInstructorRole instructor, Project project, Student student, List<ScoreDTO> scores) {
//        System.out.println("ü™Ñ [Service] Inside saveDefenseGrade");
//
//        // üîç ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ProjectInstructorRole
//        List<ProjectInstructorRole> allInstructors = projectInstructorRoleRepository.findByProjectIdRole_ProjectId(project.getProjectId());
//        long committeeAdvisorCount = allInstructors.stream()
//                .filter(role -> "Committee".equals(role.getRole()) || "Advisor".equals(role.getRole()))
//                .count();
//        long posterCommitteeCount = allInstructors.stream()
//                .filter(role -> "Committee".equals(role.getRole()) || "Poster-Committee".equals(role.getRole()))
//                .count();
//
//        System.out.println("üìå Total Committee & Advisor: " + committeeAdvisorCount);
//        System.out.println("üìå Total Committee & Poster-Committee: " + posterCommitteeCount);
//
//        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ DefenseEvaluation
//        List<DefenseEvaluation> defenseEvaluations = defenseEvaluationRepository.findByProjectIdAndStudent(project, student);
//        if (defenseEvaluations.isEmpty()) {
//            throw new EntityNotFoundException("Defense evaluation not found");
//        }
//        System.out.println("üíØ Total Defense Evaluation: " + defenseEvaluations.size());
//
//        BigDecimal avgScoreDefense = defenseEvaluations.stream()
//                .map(DefenseEvaluation::getTotalScore)
//                .filter(Objects::nonNull)
//                .peek(score -> System.out.println("üìå Processed Defense Score: " + score))
//                .reduce(BigDecimal.ZERO, BigDecimal::add)
//                .divide(BigDecimal.valueOf(defenseEvaluations.size()), RoundingMode.HALF_UP);
//        System.out.println("üíØ avgScoreDefense: " + avgScoreDefense);
//
//        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ PosterEvaluation
//        List<PosterEvaluation> posterEvaluations = posterEvaRepository.findByProjectIdPoster(project);
//        if (posterEvaluations.isEmpty()) {
//            throw new EntityNotFoundException("Poster evaluation not found");
//        }
//        System.out.println("üíØ Total Poster Evaluation: " + posterEvaluations.size());
//
//        BigDecimal avgPosterScore = posterEvaluations.stream()
//                .map(PosterEvaluation::getTotalScore)
//                .filter(Objects::nonNull)
//                .peek(score -> System.out.println("üìå Processed Poster Score: " + score))
//                .reduce(BigDecimal.ZERO, BigDecimal::add)
//                .divide(BigDecimal.valueOf(posterEvaluations.size()), RoundingMode.HALF_UP);
//        System.out.println("üíØ avgPosterScore: " + avgPosterScore);
//
//        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Evaluate ‡πÅ‡∏•‡∏∞ Extra
//        BigDecimal advisorScore = BigDecimal.ZERO;
//        BigDecimal extraScore = BigDecimal.ZERO;
//
//        for (ScoreDTO score : scores) {
//            if ("CRIT022".equals(score.getScoreCriteriaId())) {
//                advisorScore = score.getScore();
//            } else if ("CRIT023".equals(score.getScoreCriteriaId())) {
//                extraScore = score.getScore();
//            }
//        }
//        System.out.println("üíØ advisorScore: " + advisorScore);
//        System.out.println("üíØ extraScore: " + extraScore);
//
//        // üîπ Normalize ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Defense ‡πÅ‡∏•‡∏∞ Poster ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á 100
//        BigDecimal normalizedDefenseScore = avgScoreDefense.multiply(BigDecimal.valueOf(10)).divide(BigDecimal.valueOf(3), RoundingMode.HALF_UP);
//        BigDecimal normalizedPosterScore = avgPosterScore.multiply(BigDecimal.valueOf(4));
//
//        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á
//        BigDecimal weightedDefenseScore = normalizedDefenseScore.multiply(BigDecimal.valueOf(0.30)); // 30%
//        BigDecimal weightedPosterScore = normalizedPosterScore.multiply(BigDecimal.valueOf(0.10));  // 10%
////        BigDecimal weightedAdvisorScore = advisorScore.multiply(BigDecimal.valueOf(1));  // 60%
////        BigDecimal weightedExtraScore = extraScore.multiply(BigDecimal.valueOf(1));      // 10%
//
//        BigDecimal totalScore = weightedDefenseScore
//                .add(weightedPosterScore)
//                .add(advisorScore)
//                .add(extraScore);
//
//
//        System.out.println("üíØ weightedDefenseScore: " + weightedDefenseScore);
//        System.out.println("üíØ weightedPosterScore: " + weightedPosterScore);
////        System.out.println("üíØ weightedAdvisorScore: " + weightedAdvisorScore);
////        System.out.println("üíØ weightedExtraScore: " + weightedExtraScore);
//        System.out.println("üíØ totalScore: " + totalScore);
//
//        // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ GradingDefenseEvaluation
//        GradingDefenseEvaluation gradingDefense = gradingDefenseEvaluationRepository.findByProjectIdAndStudentId(project, student);
//        if (gradingDefense == null) {
//            gradingDefense = new GradingDefenseEvaluation();
//            gradingDefense.setDefenseGradeEvalId(UUID.randomUUID().toString());
//            gradingDefense.setDatetime(LocalDateTime.now());
//            gradingDefense.setProjectId(project);
//            gradingDefense.setStudentId(student);
//        }
//
//        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
//        gradingDefense.setAvgScoreDefense(avgScoreDefense.doubleValue());
//        gradingDefense.setAvgPosterScore(avgPosterScore.doubleValue());
//        gradingDefense.setEvaluateScore(advisorScore.doubleValue());
//        gradingDefense.setExtraScore(extraScore.doubleValue());
//        gradingDefense.setTotalScore(totalScore.doubleValue());
//
//        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏£‡∏î "I"
//        if (defenseEvaluations.size() < committeeAdvisorCount ||
//                posterEvaluations.size() < posterCommitteeCount ||
//                advisorScore.compareTo(BigDecimal.ZERO) == 0) { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Advisor
//            gradingDefense.setGradeResult("I");
//            gradingDefenseEvaluationRepository.save(gradingDefense);
//            System.out.println("‚ùå Assigned Grade: I (Incomplete)");
//            return "I";
//        }
//
//        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå
//        String grade = calculateGrade(totalScore);
//        gradingDefense.setGradeResult(grade);
//        gradingDefenseEvaluationRepository.save(gradingDefense);
//
//        System.out.println("‚úÖ Assigned Grade: " + grade);
//        return grade;
//    }



    private String calculateGrade(BigDecimal totalScore) {
        if (totalScore.compareTo(BigDecimal.valueOf(80)) >= 0) {
            return "A";
        } else if (totalScore.compareTo(BigDecimal.valueOf(75)) >= 0) {
            return "B+";
        } else if (totalScore.compareTo(BigDecimal.valueOf(70)) >= 0) {
            return "B";
        } else if (totalScore.compareTo(BigDecimal.valueOf(65)) >= 0) {
            return "C+";
        } else if (totalScore.compareTo(BigDecimal.valueOf(60)) >= 0) {
            return "C";
        } else if (totalScore.compareTo(BigDecimal.valueOf(55)) >= 0) {
            return "D+";
        } else if (totalScore.compareTo(BigDecimal.valueOf(50)) >= 0) {
            return "D";
        } else {
            return "F";
        }
    }

}