package com.example.project.service;

import com.example.project.DTO.Dashboard.GradingStatisticsDTO;
import com.example.project.DTO.Dashboard.EvaluationStatusResponse;
import com.example.project.entity.*;
import com.example.project.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class StatisticsService {

    @Autowired
    private ProjectRepository projectRepository;
    @Autowired
    private ProposalEvaluationRepository proposalEvaluationRepository;
    @Autowired
    private DefenseEvaluationRepository defenseEvaluationRepository;
    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private GradingProposalEvaluationRepository gradingProposalEvaluationRepository;
    @Autowired
    private GradingDefenseEvaluationRepository gradingDefenseEvaluationRepository;
    @Autowired
    private StudentProjectRepository studentProjectRepository;
    @Autowired
    private ProjectInstructorRoleRepository projectInstructorRoleRepository;
    @Autowired
    private ScoringPeriodsRepository scoringPeriodsRepository;

    @Autowired
    public StatisticsService(
            ProjectRepository projectRepository,
            GradingProposalEvaluationRepository gradingProposalEvaluationRepository,
            GradingDefenseEvaluationRepository defenseEvaluationRepository) {
        this.projectRepository = projectRepository;
        this.gradingProposalEvaluationRepository = gradingProposalEvaluationRepository;
        this.gradingDefenseEvaluationRepository = defenseEvaluationRepository;
    }

    public List<String> getAllAcademicYears() {
        return projectRepository.findAll()
                .stream()
                .map(Project::getSemester) // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
                .distinct()
                .collect(Collectors.toList());
    }

    // ----- Grade Proposal and Grade Defense ----- //
    public GradingStatisticsDTO getGradingStatistics(String year) {
        System.out.println("üìÜ year service: " + year);
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        List<Project> projects = projectRepository.findBySemester(year);  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô ProjectRepository
        System.out.println("üëΩ projects: " + projects.size());

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalStudent ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ projectId ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å projects
        List<String> studentIds = new ArrayList<>();
        List<Project> projectIds = new ArrayList<>();

        for (Project project : projects) {
            projectIds.add(project);  // Add projectId to projectIds list

            List<StudentProject> studentProjects = studentProjectRepository.findByProject_ProjectId(project.getProjectId());
            for (StudentProject studentProject : studentProjects) {
                studentIds.add(studentProject.getStudent().getStudentId());
            }
        }
        long totalStudent = studentIds.size();  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô student ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        long totalProjects = projectIds.size();

        System.out.println("totalStudent: " + totalStudent);
        System.out.println("totalProjects: " + totalProjects);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì completedProposals ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ projectId ‡∏à‡∏≤‡∏Å projectIds
        long completedProposals = gradingProposalEvaluationRepository.countDistinctProjectByProjectIn(projectIds);
        System.out.println("Completed proposals: " + completedProposals);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì completedDefenses ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ projectId ‡∏à‡∏≤‡∏Å projectIds
        long completedDefenses = gradingDefenseEvaluationRepository.countDistinctProjectIdByProjectIdIn(projectIds);
        System.out.println("Completed defenses: " + completedDefenses);

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å studentIds ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
        List<Student> students = studentRepository.findByStudentIdIn(new ArrayList<>(studentIds));
        System.out.println("students: " + students.size());

        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠ (Proposal) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (Defense)
        List<GradingProposalEvaluation> proposalGrade = gradingProposalEvaluationRepository.findByProjectIn(projectIds);  // ‡πÉ‡∏ä‡πâ projectIdIn
        List<GradingDefenseEvaluation> defenseGrade = gradingDefenseEvaluationRepository.findByProjectIdIn(projectIds);  // ‡πÉ‡∏ä‡πâ projectIdIn
        System.out.println("üéûÔ∏è proposalGrade: " + proposalGrade.size());
        System.out.println("üéûÔ∏è defenseGrade: " + defenseGrade.size());

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return new GradingStatisticsDTO(totalStudent, completedProposals, completedDefenses, students, proposalGrade, defenseGrade);
    }

    // ----- Proposal Evaluation ----- //
    public EvaluationStatusResponse getProposalEvaluationStatus(String param, String year) {
        List<Project> allProjects;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á param
        if ("All".equalsIgnoreCase(param)) {
            allProjects = projectRepository.findBySemester(year);
            System.out.println("allProjects: " + allProjects.size());
        } else {
            // allProjects = projectRepository.findByProgram(param);
            allProjects = projectRepository.findBySemesterAndProgram(year, param);
            System.out.println("allProjects: " + allProjects.size());
        }

        int totalProjects = allProjects.size();
        int completedProjects = 0;

        for (Project project : allProjects) {
            boolean isProjectEvaluated = true; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

            Project currentProject = projectRepository.findByProjectId(project.getProjectId());

            // ‡∏î‡∏∂‡∏á Instructor ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô Advisor ‡∏´‡∏£‡∏∑‡∏≠ Committee ‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
            List<ProjectInstructorRole> instructors = projectInstructorRoleRepository.findByProjectIdRole(currentProject);

            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤ instructors ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
            if (instructors == null || instructors.isEmpty()) {
                System.out.println("‚ö†Ô∏è Project: " + project.getProjectId() + " | No assigned instructors for evaluation.");
                isProjectEvaluated = false; // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
            } else {
                System.out.println("Project: " + project.getProjectId() + " | Instructors: " + instructors);

                for (ProjectInstructorRole instructorRole : instructors) {
                    if (instructorRole.getRole().equals("Advisor") || instructorRole.getRole().equals("Committee")) {
                        int totalEvaluations = proposalEvaluationRepository.countByProjectInstructorRoleAndProject(instructorRole, project);
                        int totalStudents = project.getStudentProjects().size();

                        if (totalEvaluations < totalStudents) {
                            isProjectEvaluated = false;
                            break;
                        }
                    }
                }
            }

            if (isProjectEvaluated) {
                completedProjects++;
                System.out.println("‚úÖ Project: " + project.getProjectId() + " | Evaluation Completed!");
            } else {
                System.out.println("‚ùå Project: " + project.getProjectId() + " | Evaluation Not Completed");
            }
        }

        return new EvaluationStatusResponse(totalProjects, completedProjects);
    }

    // ----- Defense Evaluation ----- //
    public EvaluationStatusResponse getDefenseEvaluationStatus(String param, String year) {
        List<Project> allProjects;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á param
        if ("All".equalsIgnoreCase(param)) {
            allProjects = projectRepository.findBySemester(year);
            System.out.println("allProjects: " + allProjects.size());
        } else {
            // allProjects = projectRepository.findByProgram(param);
            allProjects = projectRepository.findBySemesterAndProgram(year, param);
            System.out.println("allProjects: " + allProjects.size());
        }

        int totalProjects = allProjects.size();
        int completedProjects = 0;

        for (Project project : allProjects) {
            boolean isProjectEvaluated = true; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

            Project currentProject = projectRepository.findByProjectId(project.getProjectId());

            // ‡∏î‡∏∂‡∏á Instructor ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô Advisor ‡∏´‡∏£‡∏∑‡∏≠ Committee ‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
            List<ProjectInstructorRole> instructors = projectInstructorRoleRepository.findByProjectIdRole(currentProject);

            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤ instructors ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
            if (instructors == null || instructors.isEmpty()) {
                System.out.println("‚ö†Ô∏è Project: " + project.getProjectId() + " | No assigned instructors for evaluation.");
                isProjectEvaluated = false; // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
            } else {
                System.out.println("Project: " + project.getProjectId() + " | Instructors: " + instructors);

                for (ProjectInstructorRole instructorRole : instructors) {
                    if (instructorRole.getRole().equals("Advisor") || instructorRole.getRole().equals("Committee")) {
                        int totalEvaluations = defenseEvaluationRepository.countByDefenseInstructorIdAndProjectId(instructorRole, project);
                        int totalStudents = project.getStudentProjects().size();

                        if (totalEvaluations < totalStudents) {
                            isProjectEvaluated = false;
                            break;
                        }
                    }
                }
            }

            if (isProjectEvaluated) {
                completedProjects++;
                System.out.println("‚úÖ Project: " + project.getProjectId() + " | Evaluation Completed!");
            } else {
                System.out.println("‚ùå Project: " + project.getProjectId() + " | Evaluation Not Completed");
            }
        }

        return new EvaluationStatusResponse(totalProjects, completedProjects);
    }

    // ----- Poster Evaluation ----- //
    public EvaluationStatusResponse getPosterEvaluationStatus(String param, String year) {
        List<Project> allProjects;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á param
        if ("All".equalsIgnoreCase(param)) {
            allProjects = projectRepository.findBySemester(year);
            System.out.println("allProjects: " + allProjects.size());
        } else {
            allProjects = projectRepository.findBySemesterAndProgram(year, param);
            System.out.println("allProjects: " + allProjects.size());
        }

        int totalProjects = allProjects.size();
        int completedProjects = 0;

        for (Project project : allProjects) {
            boolean isProjectEvaluated = true; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

            Project currentProject = projectRepository.findByProjectId(project.getProjectId());

            // ‡∏î‡∏∂‡∏á Instructor ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô Poster-Committee ‡∏´‡∏£‡∏∑‡∏≠ Committee ‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
            List<ProjectInstructorRole> instructors = projectInstructorRoleRepository.findByProjectIdRole(currentProject);

            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤ instructors ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
            if (instructors == null || instructors.isEmpty()) {
                System.out.println("‚ö†Ô∏è Project: " + project.getProjectId() + " | No assigned instructors for evaluation.");
                isProjectEvaluated = false; // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
            } else {
                System.out.println("Project: " + project.getProjectId() + " | Instructors: " + instructors);

                for (ProjectInstructorRole instructorRole : instructors) {
                    if (instructorRole.getRole().equals("Poster-Committee") || instructorRole.getRole().equals("Committee")) {
                        int totalEvaluations = defenseEvaluationRepository.countByDefenseInstructorIdAndProjectId(instructorRole, project);
                        int totalStudents = project.getStudentProjects().size();

                        if (totalEvaluations < totalStudents) {
                            isProjectEvaluated = false;
                            break;
                        }
                    }
                }
            }

            if (isProjectEvaluated) {
                completedProjects++;
                System.out.println("‚úÖ Project: " + project.getProjectId() + " | Evaluation Completed!");
            } else {
                System.out.println("‚ùå Project: " + project.getProjectId() + " | Evaluation Not Completed");
            }
        }

        return new EvaluationStatusResponse(totalProjects, completedProjects);
    }

    // --------- Grade Distribute ------------ //
    public Map<String, Integer> getGradeDistribution(String program, String year, String evaType) {
        List<Project> allProjects;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° program ‡πÅ‡∏•‡∏∞ year
        if ("All".equalsIgnoreCase(program)) {
            allProjects = projectRepository.findBySemester(year);
        } else {
            allProjects = projectRepository.findBySemesterAndProgram(year, program);
        }

        System.out.println("allProjects [grade distribute]: " + allProjects.size());

        // ‡πÉ‡∏ä‡πâ HashMap ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        Map<String, Integer> gradeDistribution = new HashMap<>();

        for (Project project : allProjects) {
            List<StudentProject> studentProjects = studentProjectRepository.findByProject_ProjectId(project.getProjectId());

            for (StudentProject studentProject : studentProjects) {
                String studentId = studentProject.getStudent().getStudentId();
                String grade = null;

                try {
                    if ("Proposal Evaluation".equalsIgnoreCase(evaType)) {
                        grade = gradingProposalEvaluationRepository
                                .findGradeResultByProjectAndStudent_StudentId(project, studentId)
                                .getGradeResult();
                    } else if ("Defense Evaluation".equalsIgnoreCase(evaType)) {
                        grade = gradingDefenseEvaluationRepository
                                .findGradeResultByProjectIdAndStudentId_StudentId(project, studentId)
                                .getGradeResult();
                    } else if ("Poster Exhibition".equalsIgnoreCase(evaType)) {
                        return new HashMap<>(); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Poster Exhibition
                    } else {
                        throw new IllegalArgumentException("Invalid evaType: " + evaType);
                    }
                } catch (NullPointerException e) {
                    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î NullPointerException ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏£‡∏î "I"
                    grade = "I";
                }

                // ‡∏ñ‡πâ‡∏≤ grade ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "I"
                if (grade == null || grade.isEmpty()) {
                    grade = "I";
                }

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ gradeDistribution
                gradeDistribution.put(grade, gradeDistribution.getOrDefault(grade, 0) + 1);
            }
        }

        return gradeDistribution;
    }

    public List<ScoringPeriods> getAllScoringPeriods() {
        return scoringPeriodsRepository.findAll();
    }

}


// if param == All
// List<Project> allProject = projectRepository.findAll()
// Long totalProject = allProject.size()
// ‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô instructor ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Project ‡∏à‡∏≤‡∏Å projectInstructorRole *‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà role [Advisor, Committee]
//                public class ProjectInstructorRole {
//                    private String instructorId;
//                    private LocalDateTime assignDate;
//                    private String role;
//                    private Project projectIdRole;
//                    private Instructor instructor;
//                    private List<DefenseEvaluation> defenseEvaluations;
//                    private List<PosterEvaluation> posterEvaluations;
//                    private List<ProposalEvaluation> proposalEvaluations;
//                }
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ instructor ‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡∏∂‡∏¢‡∏±‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Project ‡∏à‡∏≤‡∏Å ProposalEvaluation
// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ô‡∏∞‡∏ß‡πà‡∏≤ Project001 ‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 3 ‡∏Ñ‡∏ô ‡∏°‡∏µ Advisor 1 ‡∏Ñ‡∏ô Committee 2 ‡∏Ñ‡∏ô ‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤ project ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢ advisor ‡πÅ‡∏•‡∏∞ committee ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
// ‡∏≠‡∏¢‡∏≤‡∏Å return (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô project ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô project ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß)

// else if param == ICT
// ‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á All ‡πÅ‡∏ï‡πà Project ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ program == ICT
// else if param == DST
// ‡∏ó‡∏≥‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á All ‡πÅ‡∏ï‡πà Project ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ program == DST
